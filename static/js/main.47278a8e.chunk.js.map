{"version":3,"sources":["configs/firebaseConfig.ts","config.ts","hooks/useAuth.tsx","components/Loading/Loading.tsx","components/Nav/NavElement.tsx","components/Nav/Nav.tsx","assets/images/bglogo.png","components/Auth/CustomAlert.tsx","components/Auth/AuthForm.tsx","components/Auth/SocialAuth.tsx","pages/Auth/Auth.tsx","components/Quiz/QuizName.tsx","components/Quiz/QuizSelect.tsx","components/Quiz/QuizSlider.tsx","components/Quiz/QuizLastSlide.tsx","configs/QuizzeConfig.ts","components/Quiz/QuizProgress.tsx","configs/ResultConfig.ts","components/Result/ResultTitle.tsx","components/Result/ResultButton.tsx","pages/Result/Result.tsx","pages/Quiz/Quiz.tsx","pages/Waiting/Waiting.tsx","pages/About/About.tsx","hooks/useCheckCorrectedUser.tsx","Router/TransitionRouter.tsx","Router/Router.tsx","assets/Theme/Theme.ts","App.tsx","index.tsx"],"names":["firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebase","initializeApp","firebaseInstance","authService","auth","dbService","firestore","useAuth","useState","currentUser","setCurrenUser","useEffect","onAuthStateChanged","user","Loading","isLoading","setIsLoading","Loader","useRef","setTimeout","current","remove","LOADING_TIME","ref","className","NavElement","history","useHistory","to","Button","onClick","signOut","push","Nav","CustomAlert","msg","setMsg","open","Transition","Slide","state","setState","onClose","Snackbar","TransitionComponent","anchorOrigin","vertical","horizontal","Alert","severity","name","AuthForm","email","setEmail","password","setPassword","isSignUp","setIsSignUp","errorMsg","setErrorMsg","onChange","event","target","type","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","TextField","id","label","prev","SocialAuth","onClickSocial","parentNode","provider","GoogleAuthProvider","FacebookAuthProvider","GithubAuthProvider","signInWithPopup","icon","faGoogle","size","faFacebook","faGithub","Auth","src","bglogo","alt","QuizName","index","submitValue","submitAnswer","setCurrentQuiz","color","Checkbox","checked","PanoramaFishEyeOutlined","checkedIcon","PanoramaFishEye","ClearOutlined","Clear","QuizSelect","quiz","answer","setAnswer","isCurrent","myAnswer","setMyAnswer","QuizSlider","maxQuizNum","currentQuizNum","leftButton","rightButton","classList","modifingButton","add","IconButton","aria-label","component","KeyboardArrowLeft","KeyboardArrowRight","QuizLastSlide","quizzes","setIsSubmit","map","quizs","QUIZ_MAX","length","getRandomNum","floatNum","Math","random","floor","QuizProgress","setCurrentQuizNum","progresses","setProgresses","tempProgress","Array","fill","i","parseInt","progress","saveCorrectUserEmail","uid","undefined","now","Date","date","collection","correctedAt","toUTCString","ResultTitle","isCorrect","header","setHeader","info","setInfo","ResultButton","href","variant","Result","answers","isSubmit","setIsCorrect","grading","CheckCircleOutline","ErrorOutline","Quiz","setQuizzes","setAnswers","currentQuiz","tempQuizzes","n","randomNums","randomNum","includes","num","getRandomQuiz","Waiting","rel","About","useCheckCorrectedUser","isCorrectedUser","setIsCorrectedUser","where","get","then","snapshot","forEach","exists","catch","error","console","log","TransitionRouter","withRouter","location","TransitionGroup","CSSTransition","classNames","timeout","exact","path","pathname","AppRouter","theme","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","App","ThemeProvider","ReactDOM","render","document","getElementById"],"mappings":"8TAMMA,G,aAAyB,CAC3BC,OCP8B,0CDQ9BC,WCPkC,oCDQlCC,UCPiC,oBDQjCC,cCPqC,gCDQrCC,kBCP0C,eDQ1CC,MCP6B,8CDUjCC,IAASC,cAAcR,GAEhB,IAAMS,EAAmBF,IACnBG,EAAcH,IAASI,OACvBC,EAAYL,IAASM,YEFnBC,EAdC,WAAO,IAAD,EACmBC,mBACjCL,EAAYM,aAFE,mBACXA,EADW,KACEC,EADF,KAWlB,OANAC,qBAAU,WACNR,EAAYS,oBAAmB,SAACC,GAC5BH,EAAcG,QAEnB,IAEIJ,G,QCoBIK,EA/BC,WAAM,MAEgBN,oBAAkB,GAFlC,mBAEXO,EAFW,KAEAC,EAFA,KAIZC,EAASC,mBAiBf,OAZAP,qBAAU,WAENQ,sBAAW,WACPH,GAAa,KANQ,MAUzBG,sBAAW,WACPF,EAAOG,QAAQC,WAChBC,QACJ,IAGC,qBACIC,IAAKN,EACLO,UAAS,kBAAaT,EAAY,eAAiB,IAFvD,SAII,qBAAKS,UAAU,uB,iBCGZC,EAzBI,SAAC,GAA4B,IAA1BZ,EAAyB,EAAzBA,KACZa,EAAUC,cAUhB,OACI,sBAAKH,UAAU,gBAAf,UACI,cAAC,IAAD,CAAMI,GAAG,SAAT,SACI,cAACC,EAAA,EAAD,CAAQL,UAAU,eAAlB,yCAEHX,GACG,cAACgB,EAAA,EAAD,CAAQL,UAAU,eAAeM,QAbtB,WAEnB3B,EAAY4B,UAEZL,EAAQM,KAAK,MASL,0CCFDC,EAdH,SAAC,GAA4B,IAA1BpB,EAAyB,EAAzBA,KACX,OACI,sBAAKW,UAAU,MAAf,UAEI,cAAC,IAAD,CAAMI,GAAG,IAAT,SACI,cAACC,EAAA,EAAD,CAAQL,UAAU,YAAlB,2DAIJ,cAAC,EAAD,CAAYX,KAAMA,Q,kBCjBf,G,OAAA,IAA0B,oC,qECuD1BqB,EAhDK,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,IAAKC,EAA+B,EAA/BA,OAA+B,EAE7B5B,mBAKvB,CACC6B,MAAM,EACNC,WAAYC,MATuC,mBAEhDC,EAFgD,KAEzCC,EAFyC,KAiBvD9B,qBAAU,WACN8B,EAAS,2BACFD,GADC,IAEJH,KAAc,KAARF,OAEX,CAACA,IAGJ,IAAMO,EAAU,WACZD,EAAS,2BACFD,GADC,IAEJH,MAAM,KAEVD,EAAO,KAGX,OACI,cAACO,EAAA,EAAD,CACIN,KAAMG,EAAMH,KACZK,QAASA,EACTE,oBAAqBJ,EAAMF,WAE3BO,aAAc,CAAEC,SA1BF,SA0BYC,WAzBV,SAoBpB,SAOI,cAACC,EAAA,EAAD,CAAON,QAASA,EAASO,SAAS,UAAlC,SACKd,KAJAK,EAAMF,WAAWY,OC8CnBC,EArFE,WAAM,MAEO3C,mBAAiB,IAFxB,mBAEZ4C,EAFY,KAELC,EAFK,OAIa7C,mBAAiB,IAJ9B,mBAIZ8C,EAJY,KAIFC,EAJE,OAMa/C,oBAAkB,GAN/B,mBAMZgD,EANY,KAMFC,EANE,OAQajD,mBAAiB,IAR9B,mBAQZkD,EARY,KAQFC,EARE,KAWbC,EAAW,SAACC,GAAgD,IAAD,EAGzDA,EADAC,OAAUC,EAF+C,EAE/CA,KAAMC,EAFyC,EAEzCA,MAGP,UAATD,EACAV,EAASW,GACO,aAATD,GACPR,EAAYS,IAUdC,EAAQ,uCAAG,WAAOJ,GAAP,eAAAK,EAAA,6DACbL,EAAMM,iBADO,kBAIFX,EATXrD,EAAYiE,+BAA+BhB,EAAOE,GAGlDnD,EAAYkE,2BAA2BjB,EAAOE,GAEjC,uDAMDgB,EANC,KAMDA,QACRX,EAAYW,GAPH,yDAAH,sDAgBd,OACI,eAAC,WAAD,WACI,uBAAM9C,UAAU,aAAayC,SAAUA,EAAvC,UACI,cAACM,EAAA,EAAD,CACIC,GAAG,iBACHC,MAAM,SACNV,KAAK,QACLC,MAAOZ,EACPQ,SAAUA,EACVpC,UAAU,gBAGd,cAAC+C,EAAA,EAAD,CACIC,GAAG,iBACHC,MAAM,WACNV,KAAK,WACLC,MAAOV,EACPM,SAAUA,EACVpC,UAAU,gBAGd,cAACK,EAAA,EAAD,CAAQkC,KAAK,SAASvC,UAAU,eAAhC,SACKgC,EAAW,2BAAS,uBAGzB,uBAAMhC,UAAU,aAAhB,UACKgC,EACK,4DACA,kEACN,sBAAM1B,QAjCC,WACnB2B,GAAY,SAACiB,GAAD,OAAWA,MAgCX,SACKlB,EAAW,kCAAW,gDAKnC,cAAC,EAAD,CAAarB,IAAKuB,EAAUtB,OAAQuB,Q,gBCLjCgB,EAtEI,WAAM,MAEWnE,mBAAiB,IAF5B,mBAEdkD,EAFc,KAEJC,EAFI,KAKfiB,EAAa,uCAAG,WAClBf,GADkB,uBAAAK,EAAA,+DAIKL,EAAMC,OAArBe,EAJU,EAIVA,WAEAL,EAAOK,EAAPL,GANU,SAUH,WAAPA,EACAM,EAAW,IAAI5E,EAAiBE,KAAK2E,mBACvB,aAAPP,EACPM,EAAW,IAAI5E,EAAiBE,KAAK4E,qBACvB,WAAPR,IACPM,EAAW,IAAI5E,EAAiBE,KAAK6E,oBAf3B,SAkBR9E,EAAY+E,gBAAgBJ,GAlBpB,uDAmBPR,EAnBO,KAmBPA,QACPX,EAAYW,GApBE,yDAAH,sDAwBnB,OACI,sBAAK9C,UAAU,SAAf,UACI,cAACK,EAAA,EAAD,CACIC,QAAS8C,EACTJ,GAAG,SACHhD,UAAU,iBAHd,SAKI,cAAC,IAAD,CACI2D,KAAMC,IACNC,KAAK,KACL7D,UAAU,mBAGlB,cAACK,EAAA,EAAD,CACIC,QAAS8C,EACTJ,GAAG,WACHhD,UAAU,iBAHd,SAKI,cAAC,IAAD,CACI2D,KAAMG,IACND,KAAK,KACL7D,UAAU,mBAGlB,cAACK,EAAA,EAAD,CACIC,QAAS8C,EACTJ,GAAG,SACHhD,UAAU,iBAHd,SAKI,cAAC,IAAD,CACI2D,KAAMI,IACNF,KAAK,KACL7D,UAAU,mBAIlB,cAAC,EAAD,CAAaW,IAAKuB,EAAUtB,OAAQuB,QCjDjC6B,EAnBF,WACT,OACI,sBAAKhE,UAAU,OAAf,UACI,qBAAKA,UAAU,aAAf,SACI,qBACIA,UAAU,mBACViE,IAAKC,EACLC,IAAI,cAIZ,sBAAKnE,UAAU,OAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,W,sDCuCDoE,EA3CE,SAAC,GAMI,IALlB1C,EAKiB,EALjBA,KACA2C,EAIiB,EAJjBA,MACAC,EAGiB,EAHjBA,YACAC,EAEiB,EAFjBA,aACAC,EACiB,EADjBA,eA4BA,OACI,cAACnE,EAAA,EAAD,CAAQL,UAAU,aAAayE,MAAM,YAAYnE,QATrC,SACZ+B,GAEIkC,GAAgBC,GAChBA,EAAeH,IAKnB,SACI,uBAAMrE,UAAS,qBAAgBuE,GAAgB,eAA/C,UACK7C,EACA6C,EAAgBD,EA7BzB,cAACI,EAAA,EAAD,CACIC,SAAO,EACP3E,UAAU,YACV2D,KAAM,cAACiB,EAAA,EAAD,IACNC,YAAa,cAACC,EAAA,EAAD,MAKjB,cAACJ,EAAA,EAAD,CACIC,SAAO,EACP3E,UAAU,WACV2D,KAAM,cAACoB,EAAA,EAAD,IACNF,YAAa,cAACG,EAAA,EAAD,MAgBkD,SCG5DC,EA7CI,SAAC,GAMQ,IALxBjC,EAKuB,EALvBA,GACAkC,EAIuB,EAJvBA,KACAC,EAGuB,EAHvBA,OACAC,EAEuB,EAFvBA,UACAC,EACuB,EADvBA,UACuB,EACSrG,oBAAkB,GAD3B,mBAChBsG,EADgB,KACNC,EADM,KAMjBnD,EAAW,YACTY,GAAa,IAAPA,KACNmC,EAAOnC,IAAOmC,EAAOnC,GACZ,OAAToC,QAAS,IAATA,KAAYD,GACZI,EAAYJ,EAAOnC,MAI3B,OACI,sBAAKhD,UAAS,uBAAkBqF,GAAa,yBAA7C,UACI,sBAAKrF,UAAU,iBAAf,UACI,cAAC0E,EAAA,EAAD,CACItC,SAAUA,EACVuC,SAAUW,EACVtF,UAAU,WACV2D,KAAM,cAACoB,EAAA,EAAD,IACNF,YAAa,cAACG,EAAA,EAAD,MAGjB,cAACN,EAAA,EAAD,CACItC,SAAUA,EACVuC,QAASW,EACTtF,UAAU,YACV2D,KAAM,cAACiB,EAAA,EAAD,IACNC,YAAa,cAACC,EAAA,EAAD,SAIrB,cAAC,EAAD,CAAUpD,KAAI,OAAEwD,QAAF,IAAEA,OAAF,EAAEA,EAAMxD,KAAgB2C,MAAOrB,Q,2BCkB1CwC,EA/DI,SAAC,GAII,IAHpBhB,EAGmB,EAHnBA,eACAiB,EAEmB,EAFnBA,WACAC,EACmB,EADnBA,eAEMC,EAAajG,iBAAY,MACzBkG,EAAclG,iBAAY,MAGhCP,qBAAU,WAAO,IAAD,EACZwG,EAAW/F,QAAQiG,UAAUhG,OAAO,gBACpC+F,EAAYhG,QAAQiG,UAAUhG,OAAO,gBAGrC,IAAIiG,EAAqD,KAClC,IAAnBJ,EACAI,EAAiBH,EACVD,IAAmBD,IAC1BK,EAAiBF,GAEP,QAAd,EAAAE,SAAA,SAAgBlG,QAAQiG,UAAUE,IAAI,kBACvC,CAACL,IAeJ,OACI,sBAAK1F,UAAU,eAAf,UACI,cAACgG,EAAA,EAAD,CACIjG,IAAK4F,EACLrF,QAhBQ,WACZoF,EAAiB,GACjBlB,GAAe,SAACtB,GAAD,OAAUA,EAAO,MAe5BlD,UAAW,2BACXyE,MAAM,UACNwB,aAAW,OACXC,UAAU,OANd,SAQI,cAACC,EAAA,EAAD,MAGJ,cAACH,EAAA,EAAD,CACIjG,IAAK6F,EACLtF,QArBS,WACboF,EAAiBD,GACjBjB,GAAe,SAACtB,GAAD,OAAUA,EAAO,MAoB5BlD,UAAU,cACVyE,MAAM,UACNwB,aAAW,QACXC,UAAU,OANd,SAQI,cAACE,EAAA,EAAD,UCrBDC,EArCO,SAAC,GAMG,IALtBhB,EAKqB,EALrBA,UACAF,EAIqB,EAJrBA,OACAmB,EAGqB,EAHrBA,QACA9B,EAEqB,EAFrBA,eACA+B,EACqB,EADrBA,YAOA,OACI,sBAAKvG,UAAS,uBAAkBqF,GAAa,yBAA7C,iBACKiB,QADL,IACKA,OADL,EACKA,EAASE,KAAI,SAACtB,EAAMb,GAAP,OAEV,aADA,CACC,EAAD,CAEIA,MAAOA,EACPE,cAAc,EACd7C,KAAI,UAAKwD,EAAKxD,MACd4C,YAAaa,EAAOd,GACpBG,eAAgBA,GALXH,MASb,cAAChE,EAAA,EAAD,CACIC,QAnBK,WACbiG,GAAY,IAmBJvG,UAAU,iBACVyE,MAAM,UAHV,uDC9BNgC,EAAyB,CAC3B,CAAE/E,KAAM,wIAAgCyD,QAAQ,GAChD,CAAEzD,KAAM,0HAA4ByD,QAAQ,GAC5C,CAAEzD,KAAM,wHAA+ByD,QAAQ,GAC/C,CAAEzD,KAAM,qHAA4ByD,QAAQ,GAC5C,CAAEzD,KAAM,yHAAgCyD,QAAQ,GAChD,CAAEzD,KAAM,6HAA+ByD,QAAQ,GAC/C,CAAEzD,KAAM,yIAAiCyD,QAAQ,IAG/CuB,EAAmBD,EAAME,OAEzBC,EAAe,WACjB,IAAMC,EAAmBC,KAAKC,SAAWL,EAGzC,OAFuBI,KAAKE,MAAMH,ICqCvBI,EAjDM,SAAC,GAII,IAHtBxB,EAGqB,EAHrBA,WACAC,EAEqB,EAFrBA,eACAwB,EACqB,EADrBA,kBACqB,EACelI,qBADf,mBACdmI,EADc,KACFC,EADE,KAMrBjI,qBAAU,WAKN,IAHA,IAAMkI,EAAyBC,MAAM7B,EAAa,GAAG8B,KAN7B,qBASfC,EAAI,EAAGA,GAAK/B,EAAY+B,IACzBA,IAAM9B,IACN2B,EAAaG,IAVY,uBAcjCJ,EAAcC,KACf,CAAC5B,EAAYC,IAIhB,IAAMpF,EAAU,SAAC+B,GAAyD,IAC9DW,EAAOX,EAAMC,OAAbU,GACRkE,EAAkBO,SAASzE,KAG/B,OACI,qBAAKhD,UAAU,iBAAf,SACI,qBAAKA,UAAU,gBAAf,gBACKmH,QADL,IACKA,OADL,EACKA,EAAYX,KAAI,SAACkB,EAAUrD,GACxB,OACI,qBACIrE,UAAW0H,EAEX1E,GAAE,UAAKqB,GACP/D,QAASA,GAFJ+D,W,oBCvCpBsD,GAAoB,uCAAG,WAChC1I,GADgC,uBAAAyD,EAAA,yDAGxBd,GAHwB,EAGT3C,GAAf2C,MAAOgG,EAHiB,EAGjBA,IAED,OAAVhG,QAA4BiG,IAAVjG,EALU,uBAMtBkG,EAAMC,KAAKD,MACXE,EAAO,IAAID,KAAKD,GAPM,SAStBjJ,EAAUoJ,WAAW,iBAAiBlC,IAAI,CAC5CmC,YAAaF,EAAKG,cAClBvG,QACAgG,QAZwB,2CAAH,sDC4BlBQ,GA3BK,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,UAAoC,EAC3BrJ,mBAAiB,IADU,mBAChDsJ,EADgD,KACxCC,EADwC,OAE/BvJ,mBAAiB,IAFc,mBAEhDwJ,EAFgD,KAE1CC,EAF0C,KAmBvD,OARAtJ,qBAAU,WAENoJ,EADmBF,EARI,mCAGF,2DASrBI,EADiBJ,EATjB,iOAEmB,8GASpB,CAACA,IAGA,sBAAKrI,UAAU,gBAAf,UACI,sBAAMA,UAAU,gBAAhB,SAAiCsI,IACjC,sBAAMtI,UAAU,cAAhB,SAA+BwI,QCQ5BE,GA9BM,SAAC,GAAuC,IAArCL,EAAoC,EAApCA,UAEpB,OACI,sBAAKrI,UAAU,iBAAf,UACKqI,EACG,mBAAGM,KAAK,GAAR,SACI,cAACtI,EAAA,EAAD,CAAQuI,QAAQ,YAAYnE,MAAM,UAAlC,qDAKJ,mBAAGkE,KAAK,GAAR,SACI,cAACtI,EAAA,EAAD,CAAQuI,QAAQ,YAAYnE,MAAM,UAAlC,kCAMR,mBACIkE,KAAK,iDACLrG,OAAO,SAFX,SAII,cAACjC,EAAA,EAAD,CAAQuI,QAAQ,YAAYnE,MAAM,UAAlC,6CCSDoE,I,OAxBA,SAAC,GAAiD,IAA/CvC,EAA8C,EAA9CA,QAASwC,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,SAA4B,EAE1B/J,oBAAkB,GAFQ,mBAErDqJ,EAFqD,KAE1CW,EAF0C,KAGtD/J,EAAcF,IAQpB,OANAI,qBAAU,WAEN6J,EHEe,SAAC,GACpB,IADwE,IAAlD1C,EAAiD,EAAjDA,QAASwC,EAAwC,EAAxCA,QAAS7J,EAA+B,EAA/BA,YAC/BuI,EAAI,EAAGA,EAAIsB,EAAQnC,OAAQa,IAChC,IAAW,OAAPlB,QAAO,IAAPA,OAAA,EAAAA,EAAUkB,GAAGrC,UAAW2D,EAAQtB,GAChC,OAAO,EAIf,OADAG,GAAqB1I,IACd,EGTUgK,CAAQ,CAAE3C,UAASwC,UAAS7J,mBAC1C,CAAC8J,IAIA,sBAAK/I,UAAS,iBAAY+I,EAAW,GAAK,gBAA1C,UACI,qBAAK/I,UAAU,oBACf,sBAAKA,UAAU,cAAf,UACKqI,EAAY,cAACa,GAAA,EAAD,IAAyB,cAACC,GAAA,EAAD,IAEtC,cAAC,GAAD,CAAad,UAAWA,IACxB,cAAC,GAAD,CAAcA,UAAWA,YC+C1Be,GAhEF,WACT,IADe,EAGepK,mBAAiC,MAHhD,mBAGRsH,EAHQ,KAGC+C,EAHD,OAKerK,mBAAS,EAAC,GAAM,GAAM,IALrC,mBAKR8J,EALQ,KAKCQ,EALD,OAOuBtK,mBAAiB,GAPxC,mBAORuK,EAPQ,KAOK/E,EAPL,OASiBxF,oBAAkB,GATnC,mBASR+J,EATQ,KASExC,EATF,KAmBf,OAPApH,qBAAU,WACN,IAAMqK,ENJe,SAACC,GAG1B,IAFA,IAAMC,EAAuB,GAEtBA,EAAW/C,OAAS8C,GAAG,CAC1B,IAAME,EAAY/C,IACb8C,EAAWE,SAASD,IACrBD,EAAWlJ,KAAKmJ,GAQxB,OAJ8BD,EAAWlD,KAAI,SAACqD,GAC1C,OAAOpD,EAAMoD,MMPwBC,CAZZ,GAezBT,EAAWG,KACZ,IAGC,sBAAKxJ,UAAU,OAAf,UAEI,sBAAKA,UAAU,YAAf,iBACKsG,QADL,IACKA,OADL,EACKA,EAASE,KAAI,SAACtB,EAAqBb,GAChC,OACI,cAAC,EAAD,CAEIrB,GAAIqB,EACJgB,UAAWhB,IAAUkF,EACrBrE,KAAMA,EACNC,OAAQ2D,EACR1D,UAAWkE,GALNjF,MAUjB,cAAC,EAAD,CACIgB,UApCa,IAoCFkE,EACXpE,OAAQ2D,EACRxC,QAASA,EACT9B,eAAgBA,EAChB+B,YAAaA,IAGjB,cAAC,EAAD,CACI/B,eAAgBA,EAChBiB,WA7Ca,EA8CbC,eAAgB6D,OAKxB,cAAC,EAAD,CACI9D,WApDiB,EAqDjBC,eAAgB6D,EAChBrC,kBAAmB1C,IAIvB,cAAC,GAAD,CAAQ8B,QAASA,EAASwC,QAASA,EAASC,SAAUA,QCvBnDgB,I,OA5CC,WAKZ,OACI,sBAAK/J,UAAU,UAAf,UACI,qBAAKA,UAAU,wBACf,sBAAKA,UAAU,mBAAf,UACI,sBAAKA,UAAU,iBAAf,UACI,kEACA,0GACsB,uBADtB,qIAIA,uEACY,gDADZ,sDAEI,uBAFJ,qIAMJ,sBAAKA,UAAU,iBAAf,UACI,mBACIsC,OAAO,SACP0H,IAAI,aACJrB,KAvBqB,4DAoBzB,SAKI,cAACtI,EAAA,EAAD,CAAQoE,MAAM,UAAd,sGAIJ,mBACInC,OAAO,SACP0H,IAAI,aACJrB,KA/Bc,oDA4BlB,SAKI,cAACtI,EAAA,EAAD,CAAQoE,MAAM,UAAd,oDCpBTwF,I,OAhBD,WACV,OACI,sBAAKjK,UAAU,QAAf,UACI,sBAAKA,UAAU,cAAf,UACI,8CACA,2DAGJ,sBAAKA,UAAU,iBAAf,UACI,wDACA,kECkBDkK,GA5Be,SAACjL,GAA+C,IAAD,EAC3BD,oBAAkB,GADS,mBAClEmL,EADkE,KACjDC,EADiD,KAyBzE,OAtBAjL,qBAAU,WACNR,EAAYS,oBAAmB,SAACC,GAC5B,GAAIA,EAAO,KACCuC,EAAUvC,EAAVuC,MAEe/C,EAAUoJ,WAAW,iBACfoC,MAAM,QAAS,KAAMzI,GAG7C0I,MACAC,MAAK,SAACC,GACHA,EAASC,SAAQ,YAAiB,IAAdC,EAAa,EAAbA,OAChBN,EAAmBM,SAG1BC,OAAM,SAACC,GACJC,QAAQC,IAAI,4BAA6BF,YAI1D,IAEIT,GCoBIY,GArCUC,aAAW,YAAmB,IAAhBC,EAAe,EAAfA,SAC7BhM,EAAcF,IACdoL,EAAkBD,GAAsBjL,GAE9C,OACI,cAACiM,EAAA,EAAD,CAAiBlL,UAAU,MAA3B,SACI,cAACmL,EAAA,EAAD,CAEIC,WAAW,QACXC,QAAS,KAHb,SAKI,eAAC,IAAD,CAAQJ,SAAUA,EAAlB,UACqB,OAAhBhM,EAEG,cAAC,IAAD,CAAOqM,OAAK,EAACC,KAAK,IAAlB,SACI,cAAC,EAAD,MAEJpB,EAEA,cAAC,IAAD,CAAOmB,OAAK,EAACC,KAAK,IAAlB,SACI,cAAC,GAAD,MAIJ,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,IAAlB,SACI,cAAC,GAAD,MAGR,cAAC,IAAD,CAAOA,KAAK,SAAZ,SACI,cAAC,GAAD,UAtBHN,EAASO,eCGfC,GAbG,WAEd,IAAMxM,EAAcF,IAEpB,OACI,eAAC,IAAD,WACI,cAAC,EAAD,IACA,cAAC,EAAD,CAAKM,KAAMJ,IACX,cAAC,GAAD,Q,mBCfCyM,GAAQC,aAAe,CAChCC,QAAS,CACLC,QAAS,CACLC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,aAAc,WAElBC,UAAW,CACPJ,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,aAAc,cCAXE,OARf,WACI,OACI,cAACC,GAAA,EAAD,CAAeV,MAAOA,GAAtB,SACI,cAAC,GAAD,O,OCHZW,IAASC,OAAO,cAAC,GAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.47278a8e.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nimport * as config from \"config\";\n\nconst firebaseConfig: object = {\n    apiKey: config.FB_API_KEY,\n    authDomain: config.FB_AUTH_DOMAIN,\n    projectId: config.FB_PROJECT_ID,\n    storageBucket: config.FB_STORAGE_BUCKET,\n    messagingSenderId: config.FB_MESSAGING_SENDER_ID,\n    appId: config.FB_APP_ID,\n}\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const firebaseInstance = firebase;\nexport const authService = firebase.auth();\nexport const dbService = firebase.firestore();\n","export const FB_API_KEY: string = \"AIzaSyA_HEuSJuwkDUUmW-mZzM9loXOu9ruSPbI\";\nexport const FB_AUTH_DOMAIN: string = \"like-amazing-lion.firebaseapp.com\";\nexport const FB_PROJECT_ID: string = \"like-amazing-lion\";\nexport const FB_STORAGE_BUCKET: string = \"like-amazing-lion.appspot.com\";\nexport const FB_MESSAGING_SENDER_ID: string = \"477672594501\";\nexport const FB_APP_ID: string = \"1:477672594501:web:9319859d668254e9c5172c\";\n","import React, { useEffect, useState } from \"react\";\nimport { authService } from \"configs/firebaseConfig\";\n\nconst useAuth = () => {\n    const [currentUser, setCurrenUser] = useState<firebase.default.User | null>(\n        authService.currentUser\n    );\n\n    useEffect(() => {\n        authService.onAuthStateChanged((user) => {\n            setCurrenUser(user);\n        });\n    }, []);\n\n    return currentUser;\n};\n\nexport default useAuth;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { setTimeout } from \"timers\";\n\nconst Loading = () => {\n    // loading 완료 상태를 확인 할 state\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    // loading dom을 연결할 ref\n    const Loader = useRef<any>();\n\n    const LOADING_TIME: number = 1500;\n    const ANIMATION_TIME: number = 850;\n\n    useEffect(() => {\n        // 정해진 시간 후 loading div의 class loading__end를 추가하기 위해\n        setTimeout(() => {\n            setIsLoading(true);\n        }, LOADING_TIME);\n\n        // Loading div의 fade out animation이 종류 후 삭제하기 위해\n        setTimeout(() => {\n            Loader.current.remove();\n        }, LOADING_TIME + ANIMATION_TIME);\n    }, []);\n\n    return (\n        <div\n            ref={Loader}\n            className={`loading ${isLoading ? \"loading__end\" : \"\"}`}\n        >\n            <div className=\"loading__circle\"></div>\n        </div>\n    );\n};\n\nexport default Loading;\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { authService } from \"configs/firebaseConfig\";\n\nimport { NavInterface } from \"types/Types\";\n\nconst NavElement = ({ user }: NavInterface) => {\n    const history = useHistory();\n\n    // 로그아웃\n    const onClickSignOut = () => {\n        // firebase signOut\n        authService.signOut();\n        // react router dom push url to home\n        history.push(\"/\");\n    };\n\n    return (\n        <div className=\"nav__elements\">\n            <Link to=\"/about\">\n                <Button className=\"nav__element\">만든 사람</Button>\n            </Link>\n            {user && (\n                <Button className=\"nav__element\" onClick={onClickSignOut}>\n                    로그아웃\n                </Button>\n            )}\n        </div>\n    );\n};\n\nexport default NavElement;\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { Link } from \"react-router-dom\";\n\nimport { NavInterface } from \"types/Types\";\n\nimport NavElement from \"components/Nav/NavElement\";\n\nconst Nav = ({ user }: NavInterface) => {\n    return (\n        <div className=\"nav\">\n            {/* left element of Nav */}\n            <Link to=\"/\">\n                <Button className=\"nav__logo\">놀라운 사자처럼</Button>\n            </Link>\n\n            {/* right element of Nav */}\n            <NavElement user={user} />\n        </div>\n    );\n};\n\nexport default Nav;\n","export default __webpack_public_path__ + \"static/media/bglogo.a6dd963f.png\";","import React, { useEffect, useState } from \"react\";\nimport { Snackbar, Slide } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { TransitionProps } from \"@material-ui/core/transitions\";\n\nimport { CustomAlertProps } from \"types/Types\";\n\nconst CustomAlert = ({ msg, setMsg }: CustomAlertProps) => {\n    // 경고창의 열려있음과 transition을 관리하는 state\n    const [state, setState] = useState<{\n        open: boolean;\n        Transition: React.ComponentType<\n            TransitionProps & { children?: React.ReactElement<any, any> }\n        >;\n    }>({\n        open: false,\n        Transition: Slide,\n    });\n\n    // 알람의 위치 값\n    const vertical: any = \"bottom\";\n    const horizontal: any = \"right\";\n\n    // Prop으로 넘어온 에러 메세지가 빈 문자열이 아닐 시\n    useEffect(() => {\n        setState({\n            ...state,\n            open: msg !== \"\",\n        });\n    }, [msg]);\n\n    // 닫기 버튼을 누를 시\n    const onClose = () => {\n        setState({\n            ...state,\n            open: false,\n        });\n        setMsg(\"\");\n    };\n\n    return (\n        <Snackbar\n            open={state.open}\n            onClose={onClose}\n            TransitionComponent={state.Transition}\n            key={state.Transition.name}\n            anchorOrigin={{ vertical, horizontal }}\n        >\n            <Alert onClose={onClose} severity=\"warning\">\n                {msg}\n            </Alert>\n        </Snackbar>\n    );\n};\n\nexport default CustomAlert;\n","import React, { useState, Fragment } from \"react\";\nimport { Button, TextField } from \"@material-ui/core\";\n\nimport { authService } from \"configs/firebaseConfig\";\nimport CustomAlert from \"components/Auth/CustomAlert\";\n\nconst AuthForm = () => {\n    // Email Value\n    const [email, setEmail] = useState<string>(\"\");\n    // Password Value\n    const [password, setPassword] = useState<string>(\"\");\n    // SignUp or SignIn check state\n    const [isSignUp, setIsSignUp] = useState<boolean>(true);\n    // Error Message state\n    const [errorMsg, setErrorMsg] = useState<string>(\"\");\n\n    // onChange to check there type\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const {\n            target: { type, value },\n        } = event;\n\n        if (type === \"email\") {\n            setEmail(value);\n        } else if (type === \"password\") {\n            setPassword(value);\n        }\n    };\n\n    const signUp = () =>\n        authService.createUserWithEmailAndPassword(email, password);\n\n    const signIn = () =>\n        authService.signInWithEmailAndPassword(email, password);\n\n    const onSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        try {\n            // check state to decide SiginUp or SignIn\n            await (isSignUp ? signUp() : signIn());\n        } catch (error) {\n            const { message } = error;\n            setErrorMsg(message);\n        }\n    };\n\n    // toggle isSignUp value\n    const toggleIsSignUp = () => {\n        setIsSignUp((prev) => !prev);\n    };\n\n    return (\n        <Fragment>\n            <form className=\"form__form\" onSubmit={onSubmit}>\n                <TextField\n                    id=\"standard-basic\"\n                    label=\"E-mail\"\n                    type=\"email\"\n                    value={email}\n                    onChange={onChange}\n                    className=\"form__input\"\n                ></TextField>\n\n                <TextField\n                    id=\"standard-basic\"\n                    label=\"Password\"\n                    type=\"password\"\n                    value={password}\n                    onChange={onChange}\n                    className=\"form__input\"\n                ></TextField>\n\n                <Button type=\"submit\" className=\"form__submit\">\n                    {isSignUp ? \"회원가입\" : \"로그인\"}\n                </Button>\n\n                <span className=\"form__span\">\n                    {isSignUp\n                        ? \"이미 가입을 하셨나요?\"\n                        : \"이미 계정이 있으신가요?\"}\n                    <span onClick={toggleIsSignUp}>\n                        {isSignUp ? \"로그인 하기\" : \"회원가입 하기\"}\n                    </span>\n                </span>\n            </form>\n\n            <CustomAlert msg={errorMsg} setMsg={setErrorMsg}></CustomAlert>\n        </Fragment>\n    );\n};\n\nexport default AuthForm;\n","import React, { useState } from \"react\";\nimport { firebaseInstance, authService } from \"configs/firebaseConfig\";\nimport { Button } from \"@material-ui/core\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n    faGithub,\n    faGoogle,\n    faFacebook,\n} from \"@fortawesome/free-brands-svg-icons\";\nimport CustomAlert from \"components/Auth/CustomAlert\";\n\nconst SocialAuth = () => {\n    // error message state\n    const [errorMsg, setErrorMsg] = useState<string>(\"\");\n\n    // social sign in to decide there id\n    const onClickSocial = async (\n        event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n    ) => {\n        // clicked dom\n        const { parentNode } = event.target as HTMLButtonElement;\n        // clicked dom's id\n        const { id } = parentNode as HTMLButtonElement;\n\n        let provider: any;\n        try {\n            if (id === \"google\") {\n                provider = new firebaseInstance.auth.GoogleAuthProvider();\n            } else if (id === \"facebook\") {\n                provider = new firebaseInstance.auth.FacebookAuthProvider();\n            } else if (id === \"github\") {\n                provider = new firebaseInstance.auth.GithubAuthProvider();\n            }\n\n            await authService.signInWithPopup(provider);\n        } catch ({ message }) {\n            setErrorMsg(message);\n        }\n    };\n\n    return (\n        <div className=\"social\">\n            <Button\n                onClick={onClickSocial}\n                id=\"google\"\n                className=\"social__button\"\n            >\n                <FontAwesomeIcon\n                    icon={faGoogle}\n                    size=\"4x\"\n                    className=\"social__icon\"\n                />\n            </Button>\n            <Button\n                onClick={onClickSocial}\n                id=\"facebook\"\n                className=\"social__button\"\n            >\n                <FontAwesomeIcon\n                    icon={faFacebook}\n                    size=\"4x\"\n                    className=\"social__icon\"\n                />\n            </Button>\n            <Button\n                onClick={onClickSocial}\n                id=\"github\"\n                className=\"social__button\"\n            >\n                <FontAwesomeIcon\n                    icon={faGithub}\n                    size=\"4x\"\n                    className=\"social__icon\"\n                />\n            </Button>\n\n            <CustomAlert msg={errorMsg} setMsg={setErrorMsg} />\n        </div>\n    );\n};\n\nexport default SocialAuth;\n","import React from \"react\";\n\nimport \"pages/Auth/Auth.scss\";\nimport bglogo from \"assets/images/bglogo.png\";\n\nimport AuthForm from \"components/Auth/AuthForm\";\nimport SocialAuth from \"components/Auth/SocialAuth\";\n\nconst Auth = () => {\n    return (\n        <div className=\"auth\">\n            <div className=\"background\">\n                <img\n                    className=\"background__logo\"\n                    src={bglogo}\n                    alt=\"bg_logo\"\n                ></img>\n            </div>\n\n            <div className=\"form\">\n                <AuthForm />\n                <SocialAuth />\n            </div>\n        </div>\n    );\n};\n\nexport default Auth;\n","import React from \"react\";\nimport { Button, Checkbox } from \"@material-ui/core\";\nimport {\n    Clear,\n    ClearOutlined,\n    PanoramaFishEye,\n    PanoramaFishEyeOutlined,\n} from \"@material-ui/icons\";\n\ninterface QuizNameProps {\n    name: string;\n    submitAnswer?: boolean;\n    submitValue?: boolean;\n    index: number;\n    setCurrentQuiz?: React.Dispatch<React.SetStateAction<number>>;\n}\n\nconst QuizName = ({\n    name,\n    index,\n    submitValue,\n    submitAnswer,\n    setCurrentQuiz,\n}: QuizNameProps) => {\n    const trueIcon = () => (\n        <Checkbox\n            checked\n            className=\"quiz__yes\"\n            icon={<PanoramaFishEyeOutlined />}\n            checkedIcon={<PanoramaFishEye />}\n        />\n    );\n\n    const falseIcon = () => (\n        <Checkbox\n            checked\n            className=\"quiz__no\"\n            icon={<ClearOutlined />}\n            checkedIcon={<Clear />}\n        />\n    );\n\n    const onClick = (\n        event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n    ) => {\n        if (submitAnswer && setCurrentQuiz) {\n            setCurrentQuiz(index);\n        }\n    };\n\n    return (\n        <Button className=\"quiz__name\" color=\"secondary\" onClick={onClick}>\n            <span className={`name__span ${submitAnswer && \"name__check\" }`}>\n                {name}\n                {submitAnswer ? (submitValue ? trueIcon() : falseIcon()) : \"\"}\n            </span>\n        </Button>\n    );\n};\n\nexport default QuizName;\n","import React, { useState } from \"react\";\nimport { Checkbox } from \"@material-ui/core\";\nimport {\n    Clear,\n    ClearOutlined,\n    PanoramaFishEye,\n    PanoramaFishEyeOutlined,\n} from \"@material-ui/icons\";\n\nimport QuizName from \"components/Quiz/QuizName\";\nimport { QuizSelectInterface } from \"types/Types\";\n\nconst QuizSelect = ({\n    id,\n    quiz,\n    answer,\n    setAnswer,\n    isCurrent,\n}: QuizSelectInterface) => {\n    const [myAnswer, setMyAnswer] = useState<boolean>(true);\n\n    // Prop으로 받어오는 answer은 정답들이 모여있는 배열\n    // 체크 박스를 클릭 시 현재 선택한 것과 반대의 정보를 해당 answer state의 setStating\n    // myAnswer state는 현재 component의 값을 수정하기 위함\n    const onChange = () => {\n        if (id || id === 0) {\n            answer[id] = !answer[id];\n            setAnswer?.(answer);\n            setMyAnswer(answer[id]);\n        }\n    };\n\n    return (\n        <div className={`quiz__select ${isCurrent && \"quiz__select__showing\"}`}>\n            <div className=\"select__button\">\n                <Checkbox\n                    onChange={onChange}\n                    checked={!myAnswer}\n                    className=\"quiz__no\"\n                    icon={<ClearOutlined />}\n                    checkedIcon={<Clear />}\n                />\n\n                <Checkbox\n                    onChange={onChange}\n                    checked={myAnswer}\n                    className=\"quiz__yes\"\n                    icon={<PanoramaFishEyeOutlined />}\n                    checkedIcon={<PanoramaFishEye />}\n                />\n            </div>\n\n            <QuizName name={quiz?.name as string} index={id as number} />\n        </div>\n    );\n};\n\nexport default QuizSelect;\n","import React, { useRef, useEffect } from \"react\";\n\nimport { IconButton } from \"@material-ui/core\";\nimport { KeyboardArrowLeft, KeyboardArrowRight } from \"@material-ui/icons\";\n\nimport { QuizSliderProps } from \"types/Types\";\n\nconst QuizSlider = ({\n    setCurrentQuiz,\n    maxQuizNum,\n    currentQuizNum,\n}: QuizSliderProps) => {\n    const leftButton = useRef<any>(null);\n    const rightButton = useRef<any>(null);\n\n    // 현재 보여지는 Quiz 번호를 기준으로 좌측, 우측 버튼의 보여짐을 classList를 사용하여 설정\n    useEffect(() => {\n        leftButton.current.classList.remove(\"slider__hide\");\n        rightButton.current.classList.remove(\"slider__hide\");\n\n        // classList를 수정해야 할 Button을 할당 후 수정\n        let modifingButton: React.MutableRefObject<any> | null = null;\n        if (currentQuizNum === 0) {\n            modifingButton = leftButton;\n        } else if (currentQuizNum === maxQuizNum) {\n            modifingButton = rightButton;\n        }\n        modifingButton?.current.classList.add(\"slider__hide\");\n    }, [currentQuizNum]);\n\n    // 현재 슬라이드를 기준으로 onClick 기능을 예외처리\n    const onClickLeft = () => {\n        if (currentQuizNum > 0) {\n            setCurrentQuiz((prev) => prev - 1);\n        }\n    };\n\n    const onClickRight = () => {\n        if (currentQuizNum < maxQuizNum) {\n            setCurrentQuiz((prev) => prev + 1);\n        }\n    };\n\n    return (\n        <div className=\"quiz__slider\">\n            <IconButton\n                ref={leftButton}\n                onClick={onClickLeft}\n                className={\"slider__btn slider__hide\"}\n                color=\"primary\"\n                aria-label=\"left\"\n                component=\"span\"\n            >\n                <KeyboardArrowLeft />\n            </IconButton>\n\n            <IconButton\n                ref={rightButton}\n                onClick={onClickRight}\n                className=\"slider__btn\"\n                color=\"primary\"\n                aria-label=\"right\"\n                component=\"span\"\n            >\n                <KeyboardArrowRight />\n            </IconButton>\n        </div>\n    );\n};\n\nexport default QuizSlider;\n","import React from \"react\";\nimport { Button } from \"@material-ui/core\";\n\nimport QuizName from \"components/Quiz/QuizName\";\nimport { QuizLastSlidePros } from \"types/Types\";\n\nconst QuizLastSlide = ({\n    isCurrent,\n    answer,\n    quizzes,\n    setCurrentQuiz,\n    setIsSubmit,\n}: QuizLastSlidePros) => {\n    // Quiz Component의 isSubmit state를 true로 하여 modal이 나오게\n    const onSubmit = () => {\n        setIsSubmit(true);\n    };\n\n    return (\n        <div className={`quiz__select ${isCurrent && \"quiz__select__showing\"}`}>\n            {quizzes?.map((quiz, index) => (\n                // 모든 퀴즈들을 보여줌\n                <QuizName\n                    key={index}\n                    index={index}\n                    submitAnswer={true}\n                    name={`${quiz.name}`}\n                    submitValue={answer[index]}\n                    setCurrentQuiz={setCurrentQuiz}\n                />\n            ))}\n\n            <Button\n                onClick={onSubmit}\n                className=\"select__submit\"\n                color=\"primary\"\n            >\n                결과 확인하기\n            </Button>\n        </div>\n    );\n};\n\nexport default QuizLastSlide;\n","import { QuizInterface } from \"types/Types\";\n\nconst quizs: QuizInterface[] = [\n    { name: \"멋쟁이 사자처럼 1기는 서울대학교에서만 진행했다 ?\", answer: true },\n    { name: \"자소설닷컴은 멋쟁이 사자처럼으로 시작했다 ?\", answer: true },\n    { name: \"멋쟁이 사자처럼은 IT 전공자만 신청 가능하다 ?\", answer: false },\n    { name: \"멋쟁이 사자처럼은 매년 해커톤을 진행한다 ?\", answer: true },\n    { name: \"멋쟁이 사자처럼 활동 시기는 3월부터 12월이다 ?\", answer: true },\n    { name: \"멋쟁이 사자처럼은 '이두희'씨가 만들지 않았다 ?\", answer: false },\n    { name: \"코로나, 마스크 알리미는 멋쟁이 사자차럼 출신이다 ?\", answer: true },\n];\n\nconst QUIZ_MAX: number = quizs.length;\n\nconst getRandomNum = () => {\n    const floatNum: number = Math.random() * QUIZ_MAX;\n    const intNum: number = Math.floor(floatNum);\n\n    return intNum;\n};\n\nexport const getRandomQuiz = (n: number) => {\n    const randomNums: number[] = [];\n\n    while (randomNums.length < n) {\n        const randomNum = getRandomNum();\n        if (!randomNums.includes(randomNum)) {\n            randomNums.push(randomNum);\n        }\n    }\n\n    const randomQuizs: object[] = randomNums.map((num) => {\n        return quizs[num];\n    });\n\n    return randomQuizs;\n};\n","import React, { useState, useEffect } from \"react\";\n\nimport { QuizProgressProps } from \"types/Types\";\n\nconst QuizProgress = ({\n    maxQuizNum,\n    currentQuizNum,\n    setCurrentQuizNum,\n}: QuizProgressProps) => {\n    const [progresses, setProgresses] = useState<string[]>();\n    const PROGRESS_CN: string = \"progress__element\";\n    const SELECTED_PROGRESS_CN: string = \" progress__selected\";\n\n    // currentQuizNum state가 바뀔 시 progress의 클래스 리스트를 설정\n    useEffect(() => {\n        // 모두 들어가는 클래스명을 추가하여 배열 생성\n        const tempProgress: string[] = Array(maxQuizNum + 1).fill(PROGRESS_CN);\n\n        // 반복문을 수행하며 현재 슬라이더에 맞게 클래스명을 추가\n        for (let i = 0; i <= maxQuizNum; i++) {\n            if (i === currentQuizNum) {\n                tempProgress[i] += SELECTED_PROGRESS_CN;\n            }\n        }\n\n        setProgresses(tempProgress);\n    }, [maxQuizNum, currentQuizNum]);\n\n    // 하단 progress 클릭 시 해당 id가 보여주는 slide로 넘어가기 위해\n    // currenQuizNum을 setStating\n    const onClick = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        const { id } = event.target as HTMLDivElement;\n        setCurrentQuizNum(parseInt(id));\n    };\n\n    return (\n        <div className=\"quiz__progress\">\n            <div className=\"progress__box\">\n                {progresses?.map((progress, index) => {\n                    return (\n                        <div\n                            className={progress}\n                            key={index}\n                            id={`${index}`}\n                            onClick={onClick}\n                        ></div>\n                    );\n                })}\n            </div>\n        </div>\n    );\n};\n\nexport default QuizProgress;\n","import { ResultProps } from \"types/Types\";\nimport { dbService } from \"configs/firebaseConfig\";\n\nexport const saveCorrectUserEmail = async (\n    currentUser: firebase.default.User | null | undefined\n) => {\n    const { email, uid } = currentUser as firebase.default.User;\n\n    if (email !== null && email !== undefined) {\n        const now = Date.now();\n        const date = new Date(now);\n\n        await dbService.collection(\"correctedUser\").add({\n            correctedAt: date.toUTCString(),\n            email,\n            uid,\n        });\n    }\n};\n\nexport const grading = ({ quizzes, answers, currentUser }: ResultProps) => {\n    for (let i = 0; i < answers.length; i++) {\n        if (quizzes?.[i].answer !== answers[i]) {\n            return false;\n        }\n    }\n    saveCorrectUserEmail(currentUser);\n    return true;\n};\n","import React, { useState, useEffect } from \"react\";\n\nimport { ResultElementProps } from \"types/Types\";\n\nconst ResultTitle = ({ isCorrect }: ResultElementProps) => {\n    const [header, setHeader] = useState<string>(\"\");\n    const [info, setInfo] = useState<string>(\"\");\n\n    const CORRECT_HEADER_MSG = \"정답입니다 !\";\n    const CORRECT_INFO_MSG =\n        \"이벤트 당첨자에게는 3월 2일 회원가입에 사용하셨던 이메일을 통해 연락드리겠습니다 !\";\n    const WRONG_HEADER_MSG = \"아쉽지만 틀렸습니다\";\n    const WRONG_INFO_MSG = \"하단 버튼을 이용해 다시 도전 해보세요 !!\";\n\n    // 정답, 오답을 구분하여 문자열을 state에 할당하여 보여주기 위함\n    useEffect(() => {\n        const tempHeader = isCorrect ? CORRECT_HEADER_MSG : WRONG_HEADER_MSG;\n        setHeader(tempHeader);\n\n        const tempInfo = isCorrect ? CORRECT_INFO_MSG : WRONG_INFO_MSG;\n        setInfo(tempInfo);\n    }, [isCorrect]);\n\n    return (\n        <div className=\"result__title\">\n            <span className=\"title__header\">{header}</span>\n            <span className=\"title__info\">{info}</span>\n        </div>\n    );\n};\n\nexport default ResultTitle;\n","import React from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport { ResultElementProps } from \"types/Types\";\n\nconst ResultButton = ({ isCorrect }: ResultElementProps) => {\n    // 정답, 오답을 구분하여 Button 태그를 보여줌\n    return (\n        <div className=\"result__button\">\n            {isCorrect ? (\n                <a href=\"\">\n                    <Button variant=\"contained\" color=\"primary\">\n                        메인으로 가기\n                    </Button>\n                </a>\n            ) : (\n                <a href=\"\">\n                    <Button variant=\"contained\" color=\"primary\">\n                        재도전\n                    </Button>\n                </a>\n            )}\n\n            <a\n                href=\"https://github.com/hyesungoh/Like_Amazing_Lion\"\n                target=\"_blank\"\n            >\n                <Button variant=\"contained\" color=\"primary\">\n                    소스 보기\n                </Button>\n            </a>\n        </div>\n    );\n};\n\nexport default ResultButton;\n","import React, { useState, useEffect } from \"react\";\nimport { CheckCircleOutline, ErrorOutline } from \"@material-ui/icons\";\n\nimport useAuth from \"hooks/useAuth\";\nimport { saveCorrectUserEmail, grading } from \"configs/ResultConfig\";\nimport { ResultProps } from \"types/Types\";\n\nimport ResultTitle from \"components/Result/ResultTitle\";\nimport ResultButton from \"components/Result/ResultButton\";\nimport \"pages/Result/Result.scss\";\n\nconst Result = ({ quizzes, answers, isSubmit }: ResultProps) => {\n    // 제출한 문제가 모두 정답인 지 확인하는 state\n    const [isCorrect, setIsCorrect] = useState<boolean>(false);\n    const currentUser = useAuth();\n\n    useEffect(() => {\n        // graing 함수를 이용하여 제출한 문제가 모두 정답인 지 setStating\n        setIsCorrect(grading({ quizzes, answers, currentUser }));\n    }, [isSubmit]);\n\n    // state를 prop으로 보내어 해당하는 결과를 보여줌\n    return (\n        <div className={`result ${isSubmit ? \"\" : \"result__hide\"}`}>\n            <div className=\"result__overlay\"></div>\n            <div className=\"result__box\">\n                {isCorrect ? <CheckCircleOutline /> : <ErrorOutline />}\n\n                <ResultTitle isCorrect={isCorrect} />\n                <ResultButton isCorrect={isCorrect} />\n            </div>\n        </div>\n    );\n};\n\nexport default Result;\n","import React, { useState, useEffect } from \"react\";\n\nimport \"pages/Quiz/Quiz.scss\";\nimport { QuizInterface } from \"types/Types\";\n\nimport QuizSelect from \"components/Quiz/QuizSelect\";\nimport QuizSlider from \"components/Quiz/QuizSlider\";\nimport QuizLastSlide from \"components/Quiz/QuizLastSlide\";\nimport { getRandomQuiz } from \"configs/QuizzeConfig\";\nimport QuizProgress from \"components/Quiz/QuizProgress\";\nimport Result from \"pages/Result/Result\";\n\nconst Quiz = () => {\n    const GET_QUIZ_NUM: number = 3;\n    // 퀴즈들\n    const [quizzes, setQuizzes] = useState<QuizInterface[] | null>(null);\n    // 내가 선택한 정답들\n    const [answers, setAnswers] = useState([true, true, true]);\n    // 현재 퀴즈 슬라이드 번호\n    const [currentQuiz, setCurrentQuiz] = useState<number>(0);\n    // 문제 제출 확인\n    const [isSubmit, setIsSubmit] = useState<boolean>(false);\n\n    // ComponentMount 시 정해진 수 만큼 랜덤으로 문제를 받아옴\n    useEffect(() => {\n        const tempQuizzes: QuizInterface[] = getRandomQuiz(\n            GET_QUIZ_NUM\n        ) as QuizInterface[];\n        setQuizzes(tempQuizzes);\n    }, []);\n\n    return (\n        <div className=\"quiz\">\n            {/* 가운데 있는 퀴즈 정보, 마지막 슬라이드, 슬라이드 버튼 */}\n            <div className=\"quiz__box\">\n                {quizzes?.map((quiz: QuizInterface, index) => {\n                    return (\n                        <QuizSelect\n                            key={index}\n                            id={index}\n                            isCurrent={index === currentQuiz}\n                            quiz={quiz}\n                            answer={answers}\n                            setAnswer={setAnswers}\n                        />\n                    );\n                })}\n\n                <QuizLastSlide\n                    isCurrent={currentQuiz === GET_QUIZ_NUM}\n                    answer={answers}\n                    quizzes={quizzes}\n                    setCurrentQuiz={setCurrentQuiz}\n                    setIsSubmit={setIsSubmit}\n                />\n\n                <QuizSlider\n                    setCurrentQuiz={setCurrentQuiz}\n                    maxQuizNum={GET_QUIZ_NUM}\n                    currentQuizNum={currentQuiz}\n                />\n            </div>\n\n            {/* 하단에 위치한 현재 슬라이드 번호 */}\n            <QuizProgress\n                maxQuizNum={GET_QUIZ_NUM}\n                currentQuizNum={currentQuiz}\n                setCurrentQuizNum={setCurrentQuiz}\n            />\n\n            {/* 결과 제출 시 나오는 modal */}\n            <Result quizzes={quizzes} answers={answers} isSubmit={isSubmit} />\n        </div>\n    );\n};\n\nexport default Quiz;\n","import React from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport \"pages/Waiting/Waiting.scss\";\n\nconst Waiting = () => {\n    // other content's url\n    const LIKELION_INFORMATION_URL: string = \"https://skhu-likelion-9th.github.io/likeInformative_Lion/\";\n    const LIKELION_FOOD_URL: string = \"https://skhu-likelion-9th.github.io/LikeFoodLion/\";\n\n    return (\n        <div className=\"waiting\">\n            <div className=\"background__waiting\"></div>\n            <div className=\"waiting__content\">\n                <div className=\"content__title\">\n                    <h1>축하합니다 !</h1>\n                    <p>\n                        3가지 문제를 모두 맞혔을 시, <br />\n                        자동적으로 이벤트 응모가 완료된 것 입니다! 🎁\n                    </p>\n                    <p>\n                        당첨자 추첨은 <b>3월 2일</b>에 진행할 예정이며,\n                        <br />\n                        당첨자에게는 이메일로 연락드리겠습니다. 😁\n                    </p>\n                </div>\n                <div className=\"content__other\">\n                    <a\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                        href={LIKELION_INFORMATION_URL}\n                    >\n                        <Button color=\"primary\">\n                            멋쟁이사자처럼 자세히 알아보기\n                        </Button>\n                    </a>\n                    <a\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                        href={LIKELION_FOOD_URL}\n                    >\n                        <Button color=\"primary\">맛집 보기</Button>\n                    </a>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Waiting;\n","import React from \"react\";\n\nimport \"pages/About/About.scss\";\n\nconst About = () => {\n    return (\n        <div className=\"about\">\n            <div className=\"about__info\">\n                <span>Hyesung Oh</span>\n                <span>LikeLion at SKHU 5th</span>\n            </div>\n\n            <div className=\"about__contect\">\n                <span>github.com/hyesungoh</span>\n                <span>haesungoh414@gmail.com</span>\n            </div>\n        </div>\n    );\n};\n\nexport default About;\n","import React, { useEffect, useState } from \"react\";\nimport { dbService } from \"configs/firebaseConfig\";\nimport { authService } from \"configs/firebaseConfig\";\n\nconst useCheckCorrectedUser = (currentUser: firebase.default.User | null) => {\n    const [isCorrectedUser, setIsCorrectedUser] = useState<boolean>(false);\n\n    useEffect(() => {\n        authService.onAuthStateChanged((user) => {\n            if (user) {\n                const { email } = user;\n\n                const correctedUsers = dbService.collection(\"correctedUser\");\n                const query = correctedUsers.where(\"email\", \"==\", email);\n\n                const isExist = query\n                    .get()\n                    .then((snapshot) => {\n                        snapshot.forEach(({ exists }) => {\n                            setIsCorrectedUser(exists);\n                        });\n                    })\n                    .catch((error) => {\n                        console.log(\"Error getting documents: \", error);\n                    });\n            }\n        });\n    }, []);\n\n    return isCorrectedUser;\n};\n\nexport default useCheckCorrectedUser;\n","import React from \"react\";\nimport { Switch, Route, withRouter } from \"react-router-dom\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\n\nimport Auth from \"pages/Auth/Auth\";\nimport Quiz from \"pages/Quiz/Quiz\";\nimport Waiting from \"pages/Waiting/Waiting\";\nimport About from \"pages/About/About\";\n\nimport useAuth from \"hooks/useAuth\";\nimport useCheckCorrectedUser from \"hooks/useCheckCorrectedUser\";\n\nconst TransitionRouter = withRouter(({ location }) => {\n    const currentUser = useAuth();\n    const isCorrectedUser = useCheckCorrectedUser(currentUser);\n\n    return (\n        <TransitionGroup className=\"app\">\n            <CSSTransition\n                key={location.pathname}\n                classNames=\"slide\"\n                timeout={1500}\n            >\n                <Switch location={location}>\n                    {currentUser === null ? (\n                        // 로그인 안했을 시\n                        <Route exact path=\"/\">\n                            <Auth />\n                        </Route>\n                    ) : isCorrectedUser ? (\n                        // 정답을 맞춘 유저일 시\n                        <Route exact path=\"/\">\n                            <Waiting />\n                        </Route>\n                    ) : (\n                        // 정답을 맞추기 전인 유저일 시\n                        <Route exact path=\"/\">\n                            <Quiz />\n                        </Route>\n                    )}\n                    <Route path=\"/about\">\n                        <About />\n                    </Route>\n                </Switch>\n            </CSSTransition>\n        </TransitionGroup>\n    );\n});\n\nexport default TransitionRouter;\n","import React from \"react\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport useAuth from \"hooks/useAuth\";\n\nimport Loading from \"components/Loading/Loading\";\nimport Nav from \"components/Nav/Nav\";\nimport TransitionRouter from \"Router/TransitionRouter\";\n\nconst AppRouter = () => {\n    // 현재 유저 정보\n    const currentUser = useAuth();\n\n    return (\n        <HashRouter>\n            <Loading />\n            <Nav user={currentUser} />\n            <TransitionRouter />\n        </HashRouter>\n    );\n};\n\nexport default AppRouter;\n","import { createMuiTheme } from \"@material-ui/core\";\n\nexport const theme = createMuiTheme({\n    palette: {\n        primary: {\n            light: \"#F79E1C\",\n            main: \"#F79E1C\",\n            dark: \"#F79E1C\",\n            contrastText: \"#F79E1C\",\n        },\n        secondary: {\n            light: \"#ffffff\",\n            main: \"#ffffff\",\n            dark: \"#ffffff\",\n            contrastText: \"#F79E1C\",\n        },\n    },\n});\n","import React from \"react\";\nimport AppRouter from \"Router/Router\";\nimport { ThemeProvider } from \"@material-ui/core\";\n\nimport { theme } from \"assets/Theme/Theme\";\n\nfunction App() {\n    return (\n        <ThemeProvider theme={theme}>\n            <AppRouter />\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"App\";\n\nimport \"index.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n"],"sourceRoot":""}